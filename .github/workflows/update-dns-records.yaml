name: Update DNS Records with Load Balancer

on:
  # Run as a workflow_call to be triggered by other workflows
  workflow_call:
    inputs:
      lb_hostname:
        description: 'Load Balancer Hostname'
        required: true
        type: string
  
  # Optional: Allow manual triggering
  workflow_dispatch:
    inputs:
      lb_hostname:
        description: 'Load Balancer Hostname'
        required: true
        type: string

jobs:
  update-dns:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install axios
      
      - name: Set Load Balancer Hostname
        run: |
          echo "LB_HOSTNAME=${{ inputs.lb_hostname }}" >> $GITHUB_ENV
          echo "Using Load Balancer hostname: ${{ inputs.lb_hostname }}"
      
      - name: Update DNS Records with CNAME
        run: |
          cat > update_dns.js << 'EOF'
          const axios = require('axios');
          
          async function parseSource(fullHostname, domainName) {
            if (!fullHostname.endsWith(domainName)) {
              throw new Error(`Full hostname doesn't match the domain name`);
            }
            
            return fullHostname.substring(0, fullHostname.length - domainName.length - 1);
          }
          
          async function updateDNSRecord(config, recordData, serviceName) {
            try {
              const source = await parseSource(recordData.fullHostname, config.domainName);
              
              const baseURL = `${config.apiBaseUrl}/${config.domainId}/dns/record`;
              
              const headers = {
                'Authorization': `Bearer ${config.apiToken}`,
                'Content-Type': 'application/json'
              };
              
              const response = await axios.put(`${baseURL}/${recordData.recordId}`, {
                type: 'CNAME',
                source: source,
                target: config.lbHostname,
                ttl: 300
              }, { headers });
              
              console.log(`DNS record updated successfully: ${serviceName}`);
              return true;
            } catch (error) {
              console.error(`Error updating DNS record for ${serviceName}:`, 
                error.response ? error.response.data : error.message);
              return false;
            }
          }
          
          async function updateAllRecords() {
            const config = {
              apiToken: process.env.DNS_API_TOKEN,
              apiBaseUrl: process.env.DNS_API_BASE_URL,
              domainId: process.env.DOMAIN_ID,
              domainName: process.env.DOMAIN_NAME,
              lbHostname: process.env.LB_HOSTNAME
            };
            
            const records = [
              {
                fullHostname: process.env.GRAFANA_HOSTNAME,
                recordId: process.env.GRAFANA_RECORD_ID,
                serviceName: 'Grafana'
              },
              {
                fullHostname: process.env.ARGOCD_HOSTNAME,
                recordId: process.env.ARGOCD_RECORD_ID,
                serviceName: 'ArgoCD'
              },
              {
                fullHostname: process.env.DEVOPS_OPENDAOC_HOSTNAME,
                recordId: process.env.DEVOPS_OPENDAOC_RECORD_ID,
                serviceName: 'DevOps OpenDAoC'
              }
            ];
            
            const requiredConfig = ['apiToken', 'apiBaseUrl', 'domainId', 'domainName', 'lbHostname'];
            for (const field of requiredConfig) {
              if (!config[field]) {
                console.error(`Missing required configuration: ${field}`);
                process.exit(1);
              }
            }
            
            let successCount = 0;
            let failCount = 0;
            
            for (const record of records) {
              if (!record.recordId || !record.fullHostname) {
                console.error(`Missing record information for ${record.serviceName}`);
                failCount++;
                continue;
              }
              
              const success = await updateDNSRecord(
                config,
                record,
                record.serviceName
              );
              
              if (success) {
                successCount++;
              } else {
                failCount++;
              }
            }
            
            console.log(`DNS update summary: ${successCount} successful, ${failCount} failed`);
            
            if (failCount > 0) {
              process.exit(1);
            }
          }
          
          updateAllRecords();
          EOF
          
          node update_dns.js
        env:
          DNS_API_TOKEN: ${{ secrets.DNS_API_TOKEN }}
          DNS_API_BASE_URL: ${{ secrets.DNS_API_BASE_URL }}
          DOMAIN_ID: ${{ secrets.DOMAIN_ID }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          LB_HOSTNAME: ${{ env.LB_HOSTNAME }}
          GRAFANA_HOSTNAME: ${{ secrets.GRAFANA_HOSTNAME }}
          GRAFANA_RECORD_ID: ${{ secrets.GRAFANA_RECORD_ID }}
          ARGOCD_HOSTNAME: ${{ secrets.ARGOCD_HOSTNAME }}
          ARGOCD_RECORD_ID: ${{ secrets.ARGOCD_RECORD_ID }}
          DEVOPS_OPENDAOC_HOSTNAME: ${{ secrets.DEVOPS_OPENDAOC_HOSTNAME }}
          DEVOPS_OPENDAOC_RECORD_ID: ${{ secrets.DEVOPS_OPENDAOC_RECORD_ID }}
          
      - name: Output DNS Update Results
        run: |
          echo "Updated DNS records to point to the Load Balancer (${{ env.LB_HOSTNAME }}):"
          echo "- Grafana"
          echo "- ArgoCD"
          echo "- DevOps OpenDAoC"
          echo "DNS changes may take some time to propagate based on TTL settings."