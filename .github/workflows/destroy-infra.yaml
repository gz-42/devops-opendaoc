name: "Destroy Terraform Infrastructure"

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy-infrastructure" to confirm destruction'
        required: true
        type: string

permissions:
  contents: read

jobs:
  validate-destroy:
    name: "Validate Destroy Request"
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation phrase
        if: github.event.inputs.confirm_destroy != 'destroy-infrastructure'
        run: |
          echo "Error: Confirmation phrase does not match 'destroy-infrastructure'"
          exit 1

  terraform-destroy:
    name: "Terraform Destroy"
    needs: validate-destroy
    runs-on: ubuntu-latest
    environment: destruction
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Create terraform.tfvars
        run: |
          cd terraform
          cat > terraform.tfvars << EOF
          region = "${{ secrets.AWS_REGION }}"
          prefix = "${{ secrets.TF_STATE_PREFIX }}"
          dynamodb_table_name = "${{ secrets.TF_STATE_KEY }}"
          project_name = "${{ secrets.PROJECT_NAME }}"
          root_domain_name = "${{ secrets.DOMAIN_NAME }}"
          vpc_cidr = "${{ secrets.VPC_CIDR }}"
          public_subnet_cidrs = ["${{ secrets.VPC_PUBLIC_SUBNETS }}"]
          private_subnet_cidrs = ["${{ secrets.VPC_PRIVATE_SUBNETS }}"]
          cluster_name = "${{ secrets.CLUSTER_NAME }}"
          group_users = ["${{ secrets.GROUP_USERS }}"]
          email = "${{ secrets.EMAIL }}"
          devops_opendaoc_hostname = "${{ secrets.DEVOPS_OPENDAOC_HOSTNAME }}"
          argocd_hostname = "${{ secrets.ARGOCD_HOSTNAME }}"
          mariadb_root_password = "${{ secrets.MARIADB_ROOT_PASSWORD }}"
          db_connection_string = "${{ secrets.DB_CONNECTION_STRING }}"
          grafana_hostname = "${{ secrets.GRAFANA_HOSTNAME }}"
          grafana_pwd = "${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
          slack_webhook = "${{ secrets.SLACK_WEBHOOK }}"
          slack_channel = "${{ secrets.SLACK_CHANNEL }}"
          EOF 

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
            
      - name: Terraform Plan Destroy
        id: plan-destroy
        env:
          TF_CLI_ARGS: "-compact-warnings"
        run: |
          cd terraform
          terraform plan -destroy -out=destroy.tfplan | grep -v "token\|password\|secret\|key\|cert"
          
      - name: Terraform Apply Destroy Plan
        id: destroy
        env:
          TF_CLI_ARGS: "-compact-warnings"
        run: |
          cd terraform
          terraform apply -auto-approve destroy.tfplan | grep -v "token\|password\|secret\|key\|cert"
          
      - name: Cleanup sensitive files
        if: always()
        run: |
          cd terraform
          rm -f destroy.tfplan
          rm -f crash.log
          rm -f terraform.tfstate*
          rm -f terraform.tfvars
          
  destroy-tfstate-infrastructure:
    name: "Destroy Terraform State Infrastructure"
    needs: terraform-destroy
    runs-on: ubuntu-latest
    environment: destruction
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          
      - name: Destroy Terraform State Infrastructure
        run: |
          cd terraform
          cd tfstate-init
          touch terraform.tfvars
          chmod 644 terraform.tfvars
          cat > terraform.tfvars << EOF
          region = "${{ secrets.AWS_REGION }}"
          prefix = "${{ secrets.TF_STATE_PREFIX }}"
          dynamodb_table_name = "${{ secrets.TF_STATE_KEY }}"
          EOF          
          terraform init
          terraform destroy -auto-approve | grep -v "token\|password\|secret\|key\|cert"

      - name: Cleanup sensitive files from Terraform State Infrastructure
        if: always()
        run: |
          cd terraform
          cd tfstate-init
          rm -f destroy.tfplan
          rm -f crash.log
          rm -f terraform.tfstate*
          rm -f terraform.tfvars
