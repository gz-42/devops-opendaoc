name: "💥 Destroy Terraform Infrastructure"

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy-infrastructure" to confirm destruction'
        required: true
        type: string
      run_main_destroy:
        description: 'Run Main Infrastructure Destroy'
        required: true
        type: boolean
        default: true
      run_state_destroy:
        description: 'Run Terraform State Infrastructure Destroy'
        required: true
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  #---------------------------------------------------
  # 🔐 VALIDATE DESTROY REQUEST
  #---------------------------------------------------
  validate-destroy:
    name: "🔐 Validate Destroy Request"
    runs-on: ubuntu-latest
    steps:
      - name: "🔍 Check confirmation phrase"
        if: github.event.inputs.confirm_destroy != 'destroy-infrastructure'
        run: |
          echo "::error::Confirmation phrase does not match 'destroy-infrastructure'"
          exit 1
          
      - name: "⚠️ Check state destruction safeguard"
        if: github.event.inputs.run_state_destroy == 'true' && github.event.inputs.run_main_destroy != 'true'
        run: |
          echo "::error::Cannot destroy state infrastructure without destroying main infrastructure first"
          echo "::error::Please select 'Run Main Infrastructure Destroy' or deselect 'Run Terraform State Infrastructure Destroy'"
          exit 1
          
      - name: "✅ Validation successful"
        run: |
          echo "::notice::Validation successful - proceeding with selected destruction jobs"

  #---------------------------------------------------
  # 🧨 TERRAFORM DESTROY MAIN INFRASTRUCTURE
  #---------------------------------------------------
  terraform-destroy:
    name: "🧨 Terraform Destroy Main Infrastructure"
    needs: validate-destroy
    runs-on: ubuntu-latest
    environment: destruction
    if: github.event.inputs.run_main_destroy == 'true'
    
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "☁️ Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: "🔧 Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: "📝 Create terraform.tfvars"
        run: |
          cd terraform
          touch terraform.tfvars
          chmod 644 terraform.tfvars
          cat > terraform.tfvars << 'EOF'
          region = "${{ secrets.AWS_REGION }}"
          project_name = "${{ secrets.PROJECT_NAME }}"
          root_domain_name = "${{ secrets.DOMAIN_NAME }}"
          vpc_cidr = "${{ secrets.VPC_CIDR }}"
          public_subnet_cidrs = ["${{ secrets.VPC_PUBLIC_SUBNETS }}"]
          private_subnet_cidrs = ["${{ secrets.VPC_PRIVATE_SUBNETS }}"]
          cluster_name = "${{ secrets.CLUSTER_NAME }}"
          group_users = ["${{ secrets.GROUP_USERS }}"]
          email = "${{ secrets.EMAIL }}"
          devops_opendaoc_hostname = "${{ secrets.DEVOPS_OPENDAOC_HOSTNAME }}"
          argocd_hostname = "${{ secrets.ARGOCD_HOSTNAME }}"
          mariadb_root_password = "${{ secrets.MARIADB_ROOT_PASSWORD }}"
          db_connection_string = "${{ secrets.DB_CONNECTION_STRING }}"
          grafana_hostname = "${{ secrets.GRAFANA_HOSTNAME }}"
          grafana_pwd = "${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
          grafana_tls_secret = "${{ secrets.GRAFANA_TLS_SECRET }}"
          slack_webhook = "${{ secrets.SLACK_WEBHOOK }}"
          slack_channel = "${{ secrets.SLACK_CHANNEL }}"
          EOF

      - name: "🔄 Terraform Init"
        id: init
        run: |
          cd terraform
          echo "::group::Terraform Init"
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
          echo "::endgroup::"
            
      - name: "📋 Terraform Plan Destroy"
        id: plan-destroy
        env:
          TF_CLI_ARGS: "-compact-warnings"
        run: |
          cd terraform
          echo "::group::Terraform Plan Destroy"
          terraform plan -destroy -out=destroy.tfplan | grep -v "token\|password\|secret\|key\|cert"
          echo "::endgroup::"
          
      - name: "💥 Terraform Apply Destroy Plan"
        id: destroy
        env:
          TF_CLI_ARGS: "-compact-warnings"
        run: |
          cd terraform
          echo "::group::Terraform Apply Destroy"
          terraform apply -auto-approve destroy.tfplan | grep -v "token\|password\|secret\|key\|cert"
          echo "::endgroup::"
          echo "::notice::🔥 Main infrastructure has been successfully destroyed!"
          
      - name: "🧹 Cleanup sensitive files"
        if: always()
        run: |
          cd terraform
          rm -f destroy.tfplan
          rm -f crash.log
          rm -f terraform.tfstate*
          rm -f terraform.tfvars
          
  #---------------------------------------------------
  # 🗑️ DESTROY TERRAFORM STATE INFRASTRUCTURE
  #---------------------------------------------------
  destroy-tfstate-infrastructure:
    name: "🗑️ Destroy Terraform State Infrastructure"
    needs: [validate-destroy, terraform-destroy]
    runs-on: ubuntu-latest
    environment: destruction
    if: |
      always() && 
      github.event.inputs.run_state_destroy == 'true' && 
      github.event.inputs.run_main_destroy == 'true' && 
      needs.terraform-destroy.result == 'success'
    
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        
      - name: "☁️ Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: "🔧 Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          
      - name: "📝 Create tfstate terraform.tfvars"
        run: |
          cd terraform/tfstate-init
          touch terraform.tfvars
          chmod 644 terraform.tfvars
          cat > terraform.tfvars << 'EOF'
          region = "${{ secrets.AWS_REGION }}"
          prefix = "${{ secrets.TF_STATE_PREFIX }}"
          EOF
          
      - name: "💥 Destroy Terraform State Infrastructure"
        run: |
          cd terraform/tfstate-init
          echo "::group::Terraform Init"
          terraform init -compact-warnings
          echo "::endgroup::"
          
          echo "::group::Terraform Destroy"
          terraform destroy -auto-approve -compact-warnings | grep -v "token\|password\|secret\|key\|cert"
          echo "::endgroup::"
          echo "::notice::🔥 Terraform state infrastructure has been successfully destroyed!"

      - name: "🧹 Cleanup sensitive files"
        if: always()
        run: |
          cd terraform/tfstate-init
          rm -f destroy.tfplan
          rm -f crash.log
          rm -f terraform.tfstate*
          rm -f terraform.tfvars

  #---------------------------------------------------
  # 🔔 NOTIFICATION
  #---------------------------------------------------
  notify:
    name: "🔔 Send Notification"
    needs: [validate-destroy, terraform-destroy, destroy-tfstate-infrastructure]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: "📊 Determine destruction status"
        id: status
        run: |
          # Define which jobs we should check based on inputs
          CHECK_MAIN="${{ github.event.inputs.run_main_destroy }}"
          CHECK_STATE="${{ github.event.inputs.run_state_destroy }}"
          
          # Initialize status
          STATUS="success"
          MESSAGE="Selected destruction jobs completed successfully"
          
          # Check validation job first (required for all)
          if [ "${{ needs.validate-destroy.result }}" != "success" ]; then
            STATUS="failure"
            MESSAGE="Destroy validation failed - check the confirmation phrase or safeguard conditions"
          fi
          
          # Check main infrastructure job if it was run
          if [ "$CHECK_MAIN" == "true" ] && [ "${{ needs.terraform-destroy.result }}" != "success" ]; then
            STATUS="failure"
            MESSAGE="Main infrastructure destruction failed"
          fi
          
          # Check state infrastructure job if it was run and main infra was also run/successful
          if [ "$CHECK_STATE" == "true" ] && [ "$CHECK_MAIN" == "true" ] && [ "${{ needs.terraform-destroy.result }}" == "success" ]; then
            if [ "${{ needs.destroy-tfstate-infrastructure.result }}" != "success" ]; then
              STATUS="failure"
              MESSAGE="State infrastructure destruction failed"
            fi
          fi
          
          # Set outputs
          if [ "$STATUS" == "success" ]; then
            echo "destruction_status=success" >> $GITHUB_OUTPUT
            echo "status_emoji=✅" >> $GITHUB_OUTPUT
            echo "status_message=$MESSAGE" >> $GITHUB_OUTPUT
          else
            echo "destruction_status=failure" >> $GITHUB_OUTPUT
            echo "status_emoji=❌" >> $GITHUB_OUTPUT
            echo "status_message=$MESSAGE. Check job logs for details." >> $GITHUB_OUTPUT
          fi
          
          # List executed jobs for summary
          JOBS_RUN=""
          if [ "$CHECK_MAIN" == "true" ]; then JOBS_RUN="$JOBS_RUN Main Infrastructure"; fi
          if [ "$CHECK_STATE" == "true" ] && [ "$CHECK_MAIN" == "true" ] && [ "${{ needs.terraform-destroy.result }}" == "success" ]; then 
            JOBS_RUN="$JOBS_RUN, State Infrastructure"; 
          fi
          echo "jobs_run=$JOBS_RUN" >> $GITHUB_OUTPUT
      
      - name: "📱 Send Slack notification"
        uses: slackapi/slack-github-action@v1.25.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          webhook-type: incoming-webhook
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL }}
            {
              "text": "${{ steps.status.outputs.status_emoji }} Infrastructure deployment: ${{ steps.status.outputs.deployment_status }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.status.outputs.status_emoji }} Infrastructure Deployment: ${{ steps.status.outputs.deployment_status }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Jobs Run:*\n${{ steps.status.outputs.jobs_run }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn", 
                    "text": "${{ steps.status.outputs.status_message }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow Run"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
          
      - name: "📢 Output final status"
        run: |
          echo "::notice::${{ steps.status.outputs.status_emoji }} Infrastructure destruction: ${{ steps.status.outputs.destruction_status }}"
          echo "::notice::Jobs executed: ${{ steps.status.outputs.jobs_run }}"
          echo "::notice::${{ steps.status.outputs.status_message }}"
